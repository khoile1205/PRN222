// <auto-generated />
using System;
using DataLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Beverage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Beverages");
                });

            modelBuilder.Entity("DataLayer.Entities.BeverageCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BeverageCategories");
                });

            modelBuilder.Entity("DataLayer.Entities.BeverageDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeverageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BeverageId");

                    b.HasIndex("SizeId");

                    b.ToTable("BeverageDetails");
                });

            modelBuilder.Entity("DataLayer.Entities.BeverageSize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BeverageSizes");

                    b.HasData(
                        new
                        {
                            Id = "55dfb8e1-7a33-444e-9cf2-e165a58e43b1",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4425),
                            SizeName = "S",
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4425)
                        },
                        new
                        {
                            Id = "01e50e7a-44af-4750-b99f-0e900e4bf2c6",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4439),
                            SizeName = "M",
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4439)
                        },
                        new
                        {
                            Id = "627f72b1-2592-4947-9da1-b23b37d325c1",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4441),
                            SizeName = "L",
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4441)
                        },
                        new
                        {
                            Id = "d7931b86-1b40-43e1-8585-0d3cb9246ee8",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4445),
                            SizeName = "XL",
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4445)
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("DataLayer.Entities.InventoryCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InventoryCategories");
                });

            modelBuilder.Entity("DataLayer.Entities.InventoryUpdateHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Spending")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryUpdateHistories");
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "b2519e4d-69c6-4e9d-97b9-1cdd415a635e",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4466),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4467)
                        },
                        new
                        {
                            Id = "fd3958ce-cc9c-449e-9b26-c22f0f6ac43f",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4468),
                            RoleName = "Staff",
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4468)
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Shift", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ShiftCode")
                        .HasColumnType("int");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = "b74c84e8-b6cc-4112-8135-be54f1862bb0",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4281),
                            Description = "Morning Part-time Shift",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ShiftCode = 0,
                            ShiftType = 0,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4284)
                        },
                        new
                        {
                            Id = "1f944201-16a3-4484-bdcc-0ff91532fad3",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4291),
                            Description = "Afternoon Part-time Shift",
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            ShiftCode = 1,
                            ShiftType = 0,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4292)
                        },
                        new
                        {
                            Id = "02f25958-9a19-494f-99da-54892269c217",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4294),
                            Description = "Evening Part-time Shift",
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            ShiftCode = 2,
                            ShiftType = 0,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4294)
                        },
                        new
                        {
                            Id = "97e28946-bc38-4c1f-bf57-941825a90571",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4296),
                            Description = "Morning Full-time Shift",
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            ShiftCode = 0,
                            ShiftType = 1,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4296)
                        },
                        new
                        {
                            Id = "ac9d3b2d-a05f-48fd-b9ff-ca99815f8a8d",
                            CreatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4298),
                            Description = "Afternoon Full-time Shift",
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            ShiftCode = 1,
                            ShiftType = 1,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0),
                            UpdatedAt = new DateTime(2025, 1, 20, 18, 25, 12, 235, DateTimeKind.Utc).AddTicks(4298)
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.ShiftStaff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("StaffId");

                    b.ToTable("ShiftStaff");
                });

            modelBuilder.Entity("DataLayer.Entities.Table", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("DataLayer.Entities.TableBeverage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeverageDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TableDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BeverageDetailId");

                    b.HasIndex("TableDetailId");

                    b.ToTable("TableBeverages");
                });

            modelBuilder.Entity("DataLayer.Entities.TableDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableDetails");
                });

            modelBuilder.Entity("DataLayer.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TableDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TableDetailId")
                        .IsUnique();

                    b.HasIndex("VoucherId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("DataLayer.Entities.Beverage", b =>
                {
                    b.HasOne("DataLayer.Entities.BeverageCategory", "BeverageCategory")
                        .WithMany("Beverages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeverageCategory");
                });

            modelBuilder.Entity("DataLayer.Entities.BeverageDetail", b =>
                {
                    b.HasOne("DataLayer.Entities.Beverage", "Beverage")
                        .WithMany("BeverageDetails")
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.BeverageSize", "Size")
                        .WithMany("BeverageDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beverage");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("DataLayer.Entities.Inventory", b =>
                {
                    b.HasOne("DataLayer.Entities.InventoryCategory", "InventoryCategory")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryCategory");
                });

            modelBuilder.Entity("DataLayer.Entities.InventoryUpdateHistory", b =>
                {
                    b.HasOne("DataLayer.Entities.Inventory", "Inventory")
                        .WithMany("InventoryUpdateHistory")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("DataLayer.Entities.ShiftStaff", b =>
                {
                    b.HasOne("DataLayer.Entities.Shift", "Shift")
                        .WithMany("ShiftStaff")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "Staff")
                        .WithMany("ShiftStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DataLayer.Entities.TableBeverage", b =>
                {
                    b.HasOne("DataLayer.Entities.BeverageDetail", "BeverageDetail")
                        .WithMany()
                        .HasForeignKey("BeverageDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.TableDetail", "TableDetail")
                        .WithMany("TableBeverages")
                        .HasForeignKey("TableDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeverageDetail");

                    b.Navigation("TableDetail");
                });

            modelBuilder.Entity("DataLayer.Entities.TableDetail", b =>
                {
                    b.HasOne("DataLayer.Entities.Table", "Table")
                        .WithMany("TableDetails")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("DataLayer.Entities.Transaction", b =>
                {
                    b.HasOne("DataLayer.Entities.TableDetail", "TableDetail")
                        .WithOne("Transaction")
                        .HasForeignKey("DataLayer.Entities.Transaction", "TableDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Voucher", "Voucher")
                        .WithMany("Transactions")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableDetail");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.HasOne("DataLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Entities.Beverage", b =>
                {
                    b.Navigation("BeverageDetails");
                });

            modelBuilder.Entity("DataLayer.Entities.BeverageCategory", b =>
                {
                    b.Navigation("Beverages");
                });

            modelBuilder.Entity("DataLayer.Entities.BeverageSize", b =>
                {
                    b.Navigation("BeverageDetails");
                });

            modelBuilder.Entity("DataLayer.Entities.Inventory", b =>
                {
                    b.Navigation("InventoryUpdateHistory");
                });

            modelBuilder.Entity("DataLayer.Entities.InventoryCategory", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.Shift", b =>
                {
                    b.Navigation("ShiftStaff");
                });

            modelBuilder.Entity("DataLayer.Entities.Table", b =>
                {
                    b.Navigation("TableDetails");
                });

            modelBuilder.Entity("DataLayer.Entities.TableDetail", b =>
                {
                    b.Navigation("TableBeverages");

                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Navigation("ShiftStaff");
                });

            modelBuilder.Entity("DataLayer.Entities.Voucher", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
